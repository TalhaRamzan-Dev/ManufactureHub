// Note: In a real application, you would install jspdf and jspdf-autotable
// For this demo, we'll create a basic PDF export function that could work with those libraries

interface PdfColumn {
  key: string;
  label: string;
  type?: 'text' | 'number' | 'date' | 'status' | 'currency';
}

interface PdfExportOptions {
  title: string;
  data: any[];
  columns: PdfColumn[];
  filename: string;
}

export async function exportToPdf({ title, data, columns, filename }: PdfExportOptions): Promise<void> {
  // This is a simplified implementation
  // In a real app, you would use jsPDF + jsPDF-AutoTable
  
  try {
    // For now, we'll create a basic HTML table and print it
    const htmlContent = generatePdfHtml({ title, data, columns });
    
    // Create a new window with the content
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      throw new Error('Unable to open print window. Please allow popups.');
    }
    
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    // Wait for content to load
    printWindow.onload = () => {
      printWindow.print();
      // Close window after printing (optional)
      setTimeout(() => {
        printWindow.close();
      }, 1000);
    };
    
  } catch (error) {
    console.error('PDF export error:', error);
    throw new Error('Failed to export PDF. Please try again.');
  }
}

function generatePdfHtml({ title, data, columns }: Omit<PdfExportOptions, 'filename'>): string {
  const formatCellValue = (value: any, type?: string): string => {
    if (value === null || value === undefined) return '-';
    
    switch (type) {
      case 'currency':
        return `$${Number(value).toLocaleString()}`;
      case 'date':
        return new Date(value).toLocaleDateString();
      case 'status':
        return value.toString();
      default:
        return value.toString();
    }
  };

  const tableHeaders = columns.map(col => 
    `<th style="padding: 12px; text-align: left; border-bottom: 2px solid #ffd700; background-color: #1a1a1a; color: #ffd700;">${col.label}</th>`
  ).join('');

  const tableRows = data.map(item => {
    const cells = columns.map(col => {
      const formattedValue = formatCellValue(item[col.key], col.type);
      return `<td style="padding: 8px; border-bottom: 1px solid #333; color: #ffffff;">${formattedValue}</td>`;
    }).join('');
    return `<tr>${cells}</tr>`;
  }).join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
        <title>${title} - Export</title>
        <style>
            @media print {
                body { -webkit-print-color-adjust: exact; }
            }
            body {
                font-family: Arial, sans-serif;
                margin: 20px;
                background-color: #0a0a0a;
                color: #ffffff;
            }
            .header {
                text-align: center;
                margin-bottom: 30px;
                border-bottom: 3px solid #ffd700;
                padding-bottom: 20px;
            }
            .header h1 {
                color: #ffd700;
                margin: 0;
                font-size: 28px;
            }
            .header p {
                color: #d1d5db;
                margin: 10px 0 0 0;
                font-size: 14px;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
                background-color: #1a1a1a;
                border: 1px solid #ffd700;
            }
            .summary {
                margin-top: 30px;
                padding: 20px;
                background-color: #1a1a1a;
                border: 1px solid #ffd700;
                border-radius: 8px;
            }
            .summary h3 {
                color: #ffd700;
                margin-top: 0;
            }
            .footer {
                margin-top: 40px;
                text-align: center;
                font-size: 12px;
                color: #9ca3af;
                border-top: 1px solid #333;
                padding-top: 20px;
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>Factory Dashboard</h1>
            <h2 style="color: #ffd700; margin: 10px 0;">${title}</h2>
            <p>Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
            <p>Total Records: ${data.length}</p>
        </div>
        
        <table>
            <thead>
                <tr>${tableHeaders}</tr>
            </thead>
            <tbody>
                ${tableRows}
            </tbody>
        </table>
        
        ${generateSummarySection(title, data, columns)}
        
        <div class="footer">
            <p>This document was generated by Factory Dashboard System</p>
            <p>Â© 2024 Factory Management System. All rights reserved.</p>
        </div>
    </body>
    </html>
  `;
}

function generateSummarySection(title: string, data: any[], columns: PdfColumn[]): string {
  if (title === 'Client Ledger') {
    const totalPaid = data.reduce((sum, item) => sum + (Number(item.amount_paid) || 0), 0);
    const paymentMethods = [...new Set(data.map(item => item.payment_method))].filter(Boolean);
    
    return `
      <div class="summary">
        <h3>Payment Summary</h3>
        <p><strong>Total Amount Paid:</strong> $${totalPaid.toLocaleString()}</p>
        <p><strong>Number of Payments:</strong> ${data.length}</p>
        <p><strong>Payment Methods Used:</strong> ${paymentMethods.join(', ')}</p>
        <p><strong>Average Payment:</strong> $${data.length > 0 ? (totalPaid / data.length).toLocaleString() : '0'}</p>
      </div>
    `;
  } else if (title === 'Day Book') {
    const totalCredit = data.filter(item => item.transaction_type === 'Credit').reduce((sum, item) => sum + (Number(item.amount) || 0), 0);
    const totalDebit = data.filter(item => item.transaction_type === 'Debit').reduce((sum, item) => sum + (Number(item.amount) || 0), 0);
    const netAmount = totalCredit - totalDebit;
    
    return `
      <div class="summary">
        <h3>Financial Summary</h3>
        <p><strong>Total Credits:</strong> $${totalCredit.toLocaleString()}</p>
        <p><strong>Total Debits:</strong> $${totalDebit.toLocaleString()}</p>
        <p><strong>Net Amount:</strong> <span style="color: ${netAmount >= 0 ? '#10b981' : '#ef4444'};">$${netAmount.toLocaleString()}</span></p>
        <p><strong>Number of Transactions:</strong> ${data.length}</p>
      </div>
    `;
  }
  
  return '';
}

// Alternative: Generate downloadable PDF content (simplified)
export function generatePdfData(options: PdfExportOptions): string {
  return generatePdfHtml(options);
}